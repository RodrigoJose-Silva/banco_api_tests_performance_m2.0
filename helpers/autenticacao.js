/**
 * üîê HELPER DE AUTENTICA√á√ÉO
 * 
 * Este arquivo cont√©m fun√ß√µes auxiliares para autentica√ß√£o nos testes de performance.
 * Fornece m√©todos reutiliz√°veis para obter tokens de acesso necess√°rios para
 * endpoints que requerem autentica√ß√£o.
 * 
 * Funcionalidades:
 * - Obten√ß√£o de token de autentica√ß√£o via login
 * - Reutiliza√ß√£o de credenciais de teste
 * - Centraliza√ß√£o da l√≥gica de autentica√ß√£o
 */

// Importa o m√≥dulo HTTP do K6 para fazer requisi√ß√µes HTTP
import http from 'k6/http'

// Carrega os dados de teste do arquivo JSON de fixtures
// Estes dados ser√£o usados como payload para a requisi√ß√£o de login
const postLogin = JSON.parse(open('../fixtures/postLogin.json'))

/**
 * Obt√©m um token de autentica√ß√£o fazendo login na API
 * @returns {string} Token de autentica√ß√£o para uso em requisi√ß√µes autorizadas
 */
export function obterToken() {
    // URL do endpoint de login da API
    const url = 'http://localhost:3000/login'

    // Converte os dados de login para string JSON
    // Este ser√° o corpo da requisi√ß√£o POST
    const payload = JSON.stringify(postLogin)

    // Configura√ß√£o dos par√¢metros da requisi√ß√£o HTTP
    const params = {
        headers: {
            // Define o tipo de conte√∫do como JSON
            'Content-Type': 'application/json',
        },
    }

    // Executa a requisi√ß√£o POST para o endpoint de login
    // Envia o payload com as credenciais e os par√¢metros configurados
    const response = http.post(url, payload, params)

    // Retorna o token extra√≠do da resposta JSON
    return response.json('token')
}