name: K6 Performance Tests with Smart API Detection

# ✅ Este workflow agora detecta automaticamente se a API externa está disponível
# Se não estiver, usa o servidor mock como fallback

on:
  push:
    branches: main
  pull_request:
    branches: main
  workflow_dispatch: # Permite execução manual

env:
  # Configurações da API externa
  EXTERNAL_API_URL: ${{ secrets.EXTERNAL_API_URL || 'http://localhost:3000' }}
  API_MAX_RETRIES: 3
  API_TIMEOUT: 5000
  MOCK_SERVER_PORT: 3000

jobs:
  performance-tests:
    name: Run K6 Performance Tests with Smart API Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate External API with Retry
        id: api-validation
        run: |
          echo "🔍 Validando API externa com retry..."
          echo "URL da API: $EXTERNAL_API_URL"
          echo "Máximo de tentativas: $API_MAX_RETRIES"
          echo "Timeout: ${API_TIMEOUT}ms"

          # Executar validação da API
          if npm run validate:api; then
            echo "✅ API externa está disponível!"
            echo "use_mock=false" >> $GITHUB_OUTPUT
            echo "api_url=$EXTERNAL_API_URL" >> $GITHUB_OUTPUT
          else
            echo "❌ API externa não está disponível após $API_MAX_RETRIES tentativas"
            echo "🔄 Usando servidor mock como fallback..."
            echo "use_mock=true" >> $GITHUB_OUTPUT
            echo "api_url=http://localhost:$MOCK_SERVER_PORT" >> $GITHUB_OUTPUT
          fi

      - name: Start Mock Server (if needed)
        if: steps.api-validation.outputs.use_mock == 'true'
        run: |
          echo "🎭 Iniciando servidor mock..."
          npm run start:mock &
          MOCK_PID=$!
          echo $MOCK_PID > mock-server.pid

          # Aguardar servidor inicializar
          echo "⏳ Aguardando servidor mock inicializar..."
          for i in {1..15}; do
            echo "Tentativa $i/15..."
            if curl -f -s http://localhost:$MOCK_SERVER_PORT/health > /dev/null 2>&1; then
              echo "✅ Servidor mock está respondendo!"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "❌ Servidor mock não iniciou após 30 segundos"
              exit 1
            fi
            sleep 2
          done

      - name: Verify API Endpoint
        run: |
          API_URL="${{ steps.api-validation.outputs.api_url }}"
          echo "🔍 Verificando endpoint de login em: $API_URL"

          # Testar endpoint de login
          curl -f -s -X POST "$API_URL/login" \
            -H "Content-Type: application/json" \
            -d '{"username":"julio.lima","senha":"123456"}' > /dev/null 2>&1 || {
            echo "❌ Endpoint de login não está funcionando em $API_URL"
            exit 1
          }

          echo "✅ API está funcionando corretamente!"

      - name: Run K6 Iteration Tests
        uses: grafana/k6-action@v0.3.0
        env:
          API_BASE_URL: ${{ steps.api-validation.outputs.api_url }}
          USE_MOCK_SERVER: ${{ steps.api-validation.outputs.use_mock }}
        with:
          filename: test/login.interation.test.js
          flags: --out json=results-iterations.json

      - name: Run K6 Virtual Users Tests
        uses: grafana/k6-action@v0.3.0
        env:
          API_BASE_URL: ${{ steps.api-validation.outputs.api_url }}
          USE_MOCK_SERVER: ${{ steps.api-validation.outputs.use_mock }}
        with:
          filename: test/login.virtual.users.test.js
          flags: --out json=results-virtual-users.json

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-results
          path: |
            results-*.json
            *.html
          retention-days: 30

      - name: Generate Test Summary
        run: |
          echo "📊 Resumo dos Testes de Performance:"
          echo "==================================="
          echo "🔗 API Utilizada: ${{ steps.api-validation.outputs.api_url }}"
          echo "🎭 Usando Mock: ${{ steps.api-validation.outputs.use_mock }}"
          echo ""

          # Verificar se os arquivos de resultado existem
          if [ -f results-iterations.json ]; then
            echo "✅ Teste por iterações: COMPLETO"
            echo "   - Arquivo: results-iterations.json"
            
            # Extrair informações básicas do resultado
            if command -v jq >/dev/null 2>&1; then
              echo "   - Métricas:"
              jq -r '.metrics.http_req_duration.values.p95 // "N/A"' results-iterations.json | xargs echo "     * P95 Duration:"
              jq -r '.metrics.http_req_failed.values.rate // "N/A"' results-iterations.json | xargs echo "     * Failed Rate:"
            fi
          else
            echo "❌ Teste por iterações: FALHOU"
          fi

          if [ -f results-virtual-users.json ]; then
            echo "✅ Teste com usuários virtuais: COMPLETO"
            echo "   - Arquivo: results-virtual-users.json"
            
            # Extrair informações básicas do resultado
            if command -v jq >/dev/null 2>&1; then
              echo "   - Métricas:"
              jq -r '.metrics.http_req_duration.values.p95 // "N/A"' results-virtual-users.json | xargs echo "     * P95 Duration:"
              jq -r '.metrics.http_req_failed.values.rate // "N/A"' results-virtual-users.json | xargs echo "     * Failed Rate:"
            fi
          else
            echo "❌ Teste com usuários virtuais: FALHOU"
          fi

          echo ""
          echo "🔍 Informações do Ambiente:"
          echo "   - Node.js: $(node --version)"
          echo "   - NPM: $(npm --version)"
          echo "   - API Externa: $EXTERNAL_API_URL"
          echo "   - Tentativas de Retry: $API_MAX_RETRIES"
          echo "   - Timeout: ${API_TIMEOUT}ms"

          echo ""
          if [ "${{ steps.api-validation.outputs.use_mock }}" = "true" ]; then
            echo "🎭 Testes executados com servidor mock (API externa indisponível)"
          else
            echo "🌐 Testes executados com API externa"
          fi

      - name: Upload HTML Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-html-reports
          path: report-*.html
          retention-days: 30

      - name: Cleanup Mock Server
        if: always() && steps.api-validation.outputs.use_mock == 'true'
        run: |
          echo "🧹 Limpando servidor mock..."
          if [ -f mock-server.pid ]; then
            MOCK_PID=$(cat mock-server.pid)
            if kill -0 $MOCK_PID 2>/dev/null; then
              echo "🛑 Encerrando processo do servidor mock (PID: $MOCK_PID)..."
              kill $MOCK_PID
              sleep 2
            fi
            rm -f mock-server.pid
          fi

          # Verificar se ainda há processos na porta 3000
          if lsof -ti:$MOCK_SERVER_PORT > /dev/null 2>&1; then
            echo "🛑 Forçando encerramento de processos na porta $MOCK_SERVER_PORT..."
            lsof -ti:$MOCK_SERVER_PORT | xargs kill -9
          fi

          echo "✅ Limpeza concluída!"
