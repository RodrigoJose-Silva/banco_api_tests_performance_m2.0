/**
 * üß™ TESTE DE PERFORMANCE - LOGIN POR ITERA√á√ïES
 * 
 * Este arquivo implementa um teste de performance focado em itera√ß√µes fixas.
 * Ideal para validar a consist√™ncia da API em um n√∫mero espec√≠fico de requisi√ß√µes.
 * 
 * Objetivo: Testar a performance do endpoint de login executando 10 itera√ß√µes
 * e validando se 95% das requisi√ß√µes respondem em menos de 20ms.
 */

// Importa o m√≥dulo HTTP do K6 para fazer requisi√ß√µes HTTP
import http from 'k6/http'
// Importa as fun√ß√µes sleep e check do K6
// sleep: para introduzir delays entre requisi√ß√µes
// check: para validar respostas da API
import { sleep, check } from 'k6'

// Carrega os dados de teste do arquivo JSON de fixtures
// Estes dados ser√£o usados como payload para a requisi√ß√£o de login
const postLogin = JSON.parse(open('../../fixtures/postLogin.json'))

// Configura√ß√£o das op√ß√µes do teste
export const options = {
  // Define o n√∫mero total de itera√ß√µes que ser√£o executadas
  // Cada itera√ß√£o representa uma requisi√ß√£o completa ao endpoint
  iterations: 10,

  // Define os thresholds (limites) de performance que devem ser atendidos
  thresholds: {
    // 95% das requisi√ß√µes devem ter dura√ß√£o menor que 20ms
    http_req_duration: ['p(95)<20'],
    // Taxa de falha deve ser menor que 1% (0.01)
    http_req_failed: ['rate<0.01']
  }
}

// Fun√ß√£o principal do teste - ser√° executada para cada itera√ß√£o
export default function () {
  // URL do endpoint de login da API
  const url = 'http://localhost:3000/login'

  // Converte os dados de login para string JSON
  // Este ser√° o corpo da requisi√ß√£o POST
  const payload = JSON.stringify(postLogin)

  // Configura√ß√£o dos par√¢metros da requisi√ß√£o HTTP
  const params = {
    headers: {
      // Define o tipo de conte√∫do como JSON
      'Content-Type': 'application/json',
    },
  }

  // Executa a requisi√ß√£o POST para o endpoint de login
  // Envia o payload com as credenciais e os par√¢metros configurados
  const response = http.post(url, payload, params)

  // Valida√ß√µes das respostas da API
  check(response, {
    // Verifica se o status da resposta √© 200 (sucesso)
    'Validar que o status √© 200': (r) => r.status === 200,
    // Verifica se o token retornado √© uma string v√°lida
    'Validar que o token √© do tipo string': (r) => typeof (r.json().token) == 'string'
  })

  // Aguarda 1 segundo antes da pr√≥xima itera√ß√£o
  // Isso simula o comportamento real de um usu√°rio
  sleep(1)
}