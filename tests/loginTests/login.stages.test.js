/**
 * üß™ TESTE DE PERFORMANCE - LOGIN COM EST√ÅGIOS (RAMP-UP/RAMP-DOWN)
 * 
 * Este arquivo implementa um teste de performance usando est√°gios para simular
 * cen√°rios de carga real com aumento gradual de usu√°rios e diminui√ß√£o.
 * 
 * Objetivo: Testar como a API se comporta com carga crescente e decrescente,
 * simulando cen√°rios reais de uso da aplica√ß√£o.
 */

// Importa o m√≥dulo HTTP do K6 para fazer requisi√ß√µes HTTP
import http from 'k6/http'
// Importa as fun√ß√µes sleep e check do K6
// sleep: para introduzir delays entre requisi√ß√µes
// check: para validar respostas da API
import { sleep, check } from 'k6'

// Carrega os dados de teste do arquivo JSON de fixtures
// Estes dados ser√£o usados como payload para a requisi√ß√£o de login
const postLogin = JSON.parse(open('../../fixtures/postLogin.json'))

// Configura√ß√£o das op√ß√µes do teste com est√°gios
export const options = {
    // Define os est√°gios do teste para simular carga real
    stages: [
        // Est√°gio 1: Ramp-up (subida gradual)
        // Durante 10 segundos, aumenta de 0 a 20 usu√°rios virtuais
        { duration: '10s', target: 20 },

        // Est√°gio 2: Carga constante
        // Mant√©m 20 usu√°rios virtuais por 30 segundos
        // Simula o per√≠odo de pico de uso da aplica√ß√£o
        { duration: '30s', target: 20 },

        // Est√°gio 3: Ramp-down (descida gradual)
        // Durante 10 segundos, diminui de 20 a 0 usu√°rios virtuais
        { duration: '10s', target: 0 }
    ],

    // Define os thresholds (limites) de performance que devem ser atendidos
    thresholds: {
        // 95% das requisi√ß√µes devem ter dura√ß√£o menor que 2000ms (2 segundos)
        // Threshold mais alto devido √† carga maior
        http_req_duration: ['p(95)<2000'],
        // Taxa de falha deve ser menor que 1% (0.01)
        http_req_failed: ['rate<0.01']
    }
}

// Fun√ß√£o principal do teste - ser√° executada por cada usu√°rio virtual
export default function () {
    // URL do endpoint de login da API
    const url = 'http://localhost:3000/login'

    // Converte os dados de login para string JSON
    // Este ser√° o corpo da requisi√ß√£o POST
    const payload = JSON.stringify(postLogin)

    // Configura√ß√£o dos par√¢metros da requisi√ß√£o HTTP
    const params = {
        headers: {
            // Define o tipo de conte√∫do como JSON
            'Content-Type': 'application/json',
        },
    }

    // Executa a requisi√ß√£o POST para o endpoint de login
    // Envia o payload com as credenciais e os par√¢metros configurados
    const response = http.post(url, payload, params)

    // Valida√ß√µes das respostas da API
    check(response, {
        // Verifica se o status da resposta √© 200 (sucesso)
        'Validar que o status √© 200': (r) => r.status === 200,
        // Verifica se o token retornado √© uma string v√°lida
        'Validar que o token √© do tipo string': (r) => typeof (r.json().token) == 'string'
    })

    // Aguarda 1 segundo antes da pr√≥xima requisi√ß√£o
    // Isso simula o comportamento real de um usu√°rio
    sleep(1)
}