/**
 * üß™ TESTE DE PERFORMANCE - LOGIN COM USU√ÅRIOS VIRTUAIS
 * 
 * Este arquivo implementa um teste de performance focado em usu√°rios virtuais simult√¢neos.
 * Ideal para testar a capacidade da API de lidar com m√∫ltiplos usu√°rios concorrentes.
 * 
 * Objetivo: Testar a performance do endpoint de login com 10 usu√°rios virtuais
 * simult√¢neos durante 30 segundos, validando a capacidade de concorr√™ncia da API.
 * 
 * Configura√ß√£o:
 * - 10 usu√°rios virtuais simult√¢neos
 * - Dura√ß√£o: 30 segundos
 * - Threshold: 95% das requisi√ß√µes < 2000ms
 * - Taxa de falha: < 1%
 */

// Importa o m√≥dulo HTTP do K6 para fazer requisi√ß√µes HTTP
import http from 'k6/http'
// Importa as fun√ß√µes sleep e check do K6
// sleep: para introduzir delays entre requisi√ß√µes
// check: para validar respostas da API
import { sleep, check } from 'k6'
import { pegarBaseURL } from '../../utils/variaveis.js'


// Carrega os dados de teste do arquivo JSON de fixtures
// Estes dados cont√™m as credenciais (username e senha) para autentica√ß√£o
const postLogin = JSON.parse(open('../../fixtures/postLogin.json'))

// Configura√ß√£o das op√ß√µes do teste com usu√°rios virtuais
export const options = {
  // Define o n√∫mero de usu√°rios virtuais simult√¢neos
  // Cada usu√°rio virtual executa a fun√ß√£o de teste independentemente
  vus: 10,

  // Define a dura√ß√£o total do teste
  // O teste ser√° executado por 30 segundos com 10 usu√°rios simult√¢neos
  duration: '30s',

  // Define os thresholds (limites) de performance que devem ser atendidos
  thresholds: {
    // 95% das requisi√ß√µes devem ter dura√ß√£o menor que 2000ms (2 segundos)
    // Threshold mais alto devido √† carga de m√∫ltiplos usu√°rios simult√¢neos
    http_req_duration: ['p(95)<2000'],
    // Taxa de falha deve ser menor que 1% (0.01)
    http_req_failed: ['rate<0.01']
  }
}

// Fun√ß√£o principal do teste - ser√° executada por cada usu√°rio virtual
export default function () {
  // URL do endpoint de login da API usando a fun√ß√£o utilit√°ria
  const url = pegarBaseURL() + '/login'

  // Modifica o username para simular diferentes usu√°rios
  // Isso permite testar com dados variados em cada execu√ß√£o e simular m√∫ltiplos usu√°rios
  // Nota: Esta modifica√ß√£o √© feita para demonstrar varia√ß√£o de dados, mas em um teste real
  // seria melhor usar dados din√¢micos ou m√∫ltiplos usu√°rios predefinidos
  postLogin.username = "junior.lima"

  // Converte os dados de login para string JSON
  // Este ser√° o corpo da requisi√ß√£o POST com username e senha
  const payload = JSON.stringify(postLogin)

  // Configura√ß√£o dos par√¢metros da requisi√ß√£o HTTP para login
  const params = {
    headers: {
      // Define o tipo de conte√∫do como JSON para o servidor processar corretamente
      'Content-Type': 'application/json',
    },
  }

  // Executa a requisi√ß√£o POST para o endpoint de login da API banc√°ria
  // Envia o payload com as credenciais e os par√¢metros configurados
  const response = http.post(url, payload, params)

  // Valida√ß√µes das respostas da API de login
  check(response, {
    // Verifica se o status da resposta √© 200 (sucesso)
    'Validar que o status √© 200': (r) => r.status === 200,
    // Verifica se o token retornado √© uma string v√°lida
    'Validar que o token √© do tipo string': (r) => typeof (r.json().token) == 'string'
  })

  // Aguarda 1 segundo antes da pr√≥xima requisi√ß√£o
  // Isso simula o comportamento real de um usu√°rio entre requisi√ß√µes de login
  sleep(1)
}