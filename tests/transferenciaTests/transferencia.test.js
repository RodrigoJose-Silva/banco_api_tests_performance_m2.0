/**
 * üß™ TESTE DE PERFORMANCE - TRANSFER√äNCIA ENTRE CONTAS
 * 
 * Este arquivo implementa um teste de performance para o endpoint de transfer√™ncia
 * entre contas da API banc√°ria. O teste inclui autentica√ß√£o autom√°tica e
 * valida√ß√£o da opera√ß√£o de transfer√™ncia.
 * 
 * Objetivo: Testar a performance do endpoint de transfer√™ncia com autentica√ß√£o,
 * validando se a opera√ß√£o √© executada com sucesso e dentro dos par√¢metros esperados.
 * 
 * Fluxo do teste:
 * 1. Autentica o usu√°rio e obt√©m token JWT via helper
 * 2. Executa transfer√™ncia entre contas usando o token
 * 3. Valida resposta da API (status 201 - Created)
 * 
 * Configura√ß√£o:
 * - 1 itera√ß√£o (teste √∫nico)
 * - Autentica√ß√£o autom√°tica via helper
 * - Endpoint: POST /transferencias
 */

// Importa o m√≥dulo HTTP do K6 para fazer requisi√ß√µes HTTP
import http from 'k6/http';
// Importa as fun√ß√µes sleep e check do K6
// sleep: para introduzir delays entre requisi√ß√µes
// check: para validar respostas da API
import { sleep, check } from 'k6';
// Importa a fun√ß√£o de autentica√ß√£o para obter token JWT
import { obterToken } from '../../helpers/autenticacao.js'
import { pegarBaseURL } from '../../utils/variaveis.js'

// Carrega os dados de teste para transfer√™ncia do arquivo JSON de fixtures
// Estes dados cont√™m contaOrigem, contaDestino, valor e campo para token
const postTransferencia = JSON.parse(open('../../fixtures/postTransferencia.json'))

// Configura√ß√£o das op√ß√µes do teste
export const options = {
  // Define o n√∫mero total de itera√ß√µes que ser√£o executadas
  // Cada itera√ß√£o representa uma transfer√™ncia completa com autentica√ß√£o
  iterations: 1,
};

// Fun√ß√£o principal do teste - ser√° executada para cada itera√ß√£o
export default function () {
  // Obt√©m o token de autentica√ß√£o atrav√©s da fun√ß√£o helper
  // Este token JWT ser√° usado no header Authorization da requisi√ß√£o
  // A fun√ß√£o obterToken() faz uma requisi√ß√£o POST para /login e retorna o token da resposta
  const token = obterToken()

  // URL do endpoint de transfer√™ncia da API usando a fun√ß√£o utilit√°ria
  const url = pegarBaseURL() + '/transferencias'

  // Converte os dados de transfer√™ncia para string JSON
  // Este ser√° o corpo da requisi√ß√£o POST com contas e valor
  const payload = JSON.stringify(postTransferencia)

  // Configura√ß√£o dos par√¢metros da requisi√ß√£o HTTP para transfer√™ncia
  const params = {
    headers: {
      // Define o tipo de conte√∫do como JSON para o servidor processar corretamente
      'Content-Type': 'application/json',
      // Adiciona o token JWT de autentica√ß√£o no header Authorization
      // Formato: Bearer <token>
      'Authorization': 'Bearer ' + token
    },
  }

  // Executa a requisi√ß√£o POST para o endpoint de transfer√™ncia da API banc√°ria
  // Envia o payload com os dados da transfer√™ncia e o token de autentica√ß√£o
  const response = http.post(url, payload, params)

  // Valida√ß√µes das respostas da API de transfer√™ncia
  check(response, {
    // Verifica se o status da resposta √© 201 (Created)
    // Status 201 indica que a transfer√™ncia foi criada com sucesso
    'Validar que o status √© 201': (r) => r.status === 201
  })

  // Aguarda 1 segundo antes da pr√≥xima itera√ß√£o
  // Isso simula o comportamento real de um usu√°rio entre requisi√ß√µes de transfer√™ncia
  sleep(1)
}
